pip es un gestor de librerias
sudo apt-get install python3-pip

una vez instalado pip3 instalamos el framework django
pip3 install django

cada vez que ponga python pone directamente python3
sudo apt install python-is-python3

comprobar version de python
python -m django --version

django-admin

creamos un proyexto en el directorio que queramos
django-admin startproject mysite

pasos
cd mysite/
cat mysite/urls.py

iniciar servidor
python manage.py runserver

crear poryecto
django-admin startproject <nombre>
python manage.py startapp <nombre>

mysite                      # django-admin sartproject <nombre>
    db.sqlite3              # por defecto vase de datos sqlite
    manage.py               # se crea solo, manejar el proyecto
    mysite                  # mysite configuraciones generales del proyecto
        asgi.py             # tiene que ver con el despliegue
        __init__.py         # esta vacio indica que es un modulos de python
        settings.py         # configuracion generale
        urls.py             # informacion para el router, GENERAL. distribuidor de peticiones
        wsgi.py             # tiene que ver con el despliegue
    polls                   # primera aplicacion
        admin.py            # lo veremos. tiene scaffolding
        apps.py             # define info de polls
        __init__.py         # esta vacio. indica que es un modulo de python
        migrations          # cambio en la base de datos
            __init__.py     
        models.py           # defino clases de datos y logica de negocio
        tests.py            # unit testing
        urls.py             # dedino quien controla esa peticion (vista -> "controlador")
        views.py            # interactua con modoelos y lo pinta en un template (template -> "vista")


CREATE DATABASE mysite
CREATE USER 'mysite'@'localhost' IDENTIFIED BY '1234';
GRANT ALL PRIVILEGES ON mysite.* TO 'mysite'@'localhost' WITH GRANT OPTION;

CREATE DATABASE local;
CREATE USER 'local'@'localhost' IDENTIFIED BY '1234';
GRANT ALL PRIVILEGES ON local.* TO 'local'@'localhost' WITH GRANT OPTION;


instalar lector de python con mysql
pip install mysqlclient

si no deja hacer sudo su desde home
apt update
apt-get install python3-dev default-libmysqlclient-dev build-essential

una vez todo instalado 
desde Python/mysite 
python manage.py migrate

python manage.py shell (desde PYTHON/mysite)
>>> from polls.models import Choice, Question
>>> Question.objects.all()
<QuerySet []>


>>> from django.utils import timezone
>>> objeto_pregunta =  Question(question_text="What's new?", pub_date=timezone.now())
>>> objeto_pregunta.question_text="PRIMERA PREGUNTA"
>>> objeto_pregunta.save()
>>> objeto_pregunta =  Question(question_text="MOMENTO PREGUNTA?", pub_date=timezone.now())
>>> objeto_pregunta.save()
>>> Question.objects.all()
<QuerySet [<Question: Question object (1)>, <Question: Question object (2)>]>


for q in Question.objects.all():
...     print(q.question_text)
... 
PRIMERA PREGUNTA
MOMENTO PREGUNTA?

una vez cambiada las clases de models
cerramos terminal y volvemos a abrir pyhon manage.py shell desde PYTHON/mysite

crear usuario con python desde PYTHON/mysite
python mange.py createsuperuser



TAREA REPETIR EL TUTORIAL 1 Y 2 CON OTRAS CLASES 



todos los usados quita humo 
    python3
    pip3
    sudo apt-get install python3
    pip3 install django
    pyhon3 -m django --version
    sudo apt install python-is-python3
    django-admin
    sudo apt install vim
    vim ~/.bashrc

        PATH=$PATH:~/.local/bin
        export $PATH

    django-admin startproject mysite
    python manage.py runserver
    python manage.py startapp polls
    sudo su pip install mysqlclient
    python manage.py migrate
    python manage.py makemigrations polls
    python manage.py shell
    python manage.py createsuperuser