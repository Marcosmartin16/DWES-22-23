** CREAR BASE DE DATOS **

    CREATE DATABASE nombre;
    GRANT ALL PRIVILEGES ON nombre.* TO 'mysite'@'localhost' WITH GRANT OPTION

** CREAR PROYECTO **
    
    django-admin startproject mysite

** DESPLEGAR APLICACION **

    -cambiamos a mysite

    python manage.py runserver

** CREAR APLICACION **

    python manage.py startapp polls

** POLLS/VIEWS.PY **

    -insertamos este codigo en polls/views.py para crear la vista del index

    from django.http import HttpResponse

    def index(request):
        return HttpResponse("Hello, world. You're at the polls index.")

** POLLS/URLS.PY **

    -insertamos este codigo en polls/urls.py para añadir la url a la vista creada anteriormente

    from django.urls import path

    from . import views

    urlpatterns = [
        path('', views.index, name='index'),
    ]

** MYSITE/URLS.PY **

    -volvemos a mysite y en urls.py añadimos la url de nuestra aplicacion 

    from django.contrib import admin
    from django.urls import include, path

    urlpatterns = [
        path('polls/', include('polls.urls')),
        path('admin/', admin.site.urls),
    ]

** POLLS/MODELS.PY **

    -en el models creamos nuestras tablas de base de datos 

    from django.db import models

    class Question(models.Model):
        question_text = models.CharField(max_length=200)
        pub_date = models.DateTimeField('date published')

    class Choice(models.Model):
        question = models.ForeignKey(Question, on_delete=models.CASCADE)
        choice_text = models.CharField(max_length=200)
        votes = models.IntegerField(default=0)

** MYSITE/SETTINGS.PY **

    -añadimos al proyecto la configuracion de nuestra app. Añadimos 'nombreapp.apps.NombreappConfig'

    INSTALLED_APPS = [
        'polls.apps.PollsConfig',
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
    ]

** MAKEMIGRATIONS **

    -escribimos este comando para avisar de que hemos cambiado la base de datos

    python manage.py makemigrations polls

** MIGRATE **

    -una vez nos dan el ok con la sintaxis de la base de datos podemos migrar finalmente
    
    python manage.py migrate

** SUPERUSUARIO **

    -para poder acceder al area de administracion creamos un usuario admin sin email y con contraseña 1234

    python manage.py createsuperuser

** POLLS/ADMIN.PY **

    -añadimos nuestro model para poder modificarlo desde el area de administracion

    from django.contrib import admin

    from .models import Question

    admin.site.register(Question)

** POLLS/VIEWS.PY **

    -añadimos mas views a nuestra app

    def detail(request, question_id):
        return HttpResponse("You're looking at question %s." % question_id)

    def results(request, question_id):
        response = "You're looking at the results of question %s."
        return HttpResponse(response % question_id)

    def vote(request, question_id):
        return HttpResponse("You're voting on question %s." % question_id)

** POLLS/URLS.PY **

    -añadimos las nuevas urls para las vistas que acabamos de crear

    from django.urls import path

    from . import views

    urlpatterns = [
        # ex: /polls/
        path('', views.index, name='index'),
        # ex: /polls/5/
        path('<int:question_id>/', views.detail, name='detail'),
        # ex: /polls/5/results/
        path('<int:question_id>/results/', views.results, name='results'),
        # ex: /polls/5/vote/
        path('<int:question_id>/vote/', views.vote, name='vote'),
    ]

** POLLS/VIEWS.PY **

    -cambiamos el index para que nos saque las ultimas 5 noticias y las devuelva concatenadas con una , entre cada pregunta

    from django.http import HttpResponse

    from .models import Question

    def index(request):
        latest_question_list = Question.objects.order_by('-pub_date')[:5]
        output = ', '.join([q.question_text for q in latest_question_list])
        return HttpResponse(output)

** POLLS/TEMPLATES/POLLS/INDEX.HTML **

    -creamos la carpeta de templates y el archivo index.html que sera el template de nuestro index

    {% if latest_question_list %}
        <ul>
        {% for question in latest_question_list %}
            <li><a href="/polls/{{ question.id }}/">{{ question.question_text }}</a></li>
        {% endfor %}
        </ul>
        {% else %}
            <p>No polls are available.</p>
    {% endif %}

** POLLS/VIEWS.PY **

    -colocamos en la vista del index el template y devolvemos un contexto para que lo renderice el template

    from django.shortcuts import render

    from .models import Question

    def index(request):
        latest_question_list = Question.objects.order_by('-pub_date')[:5]
        context = {'latest_question_list': latest_question_list}
        return render(request, 'polls/index.html', context)

** POLLS/VIEWS.PY **

    -cambiamos la vista de details para que cuando no encuentra la noticia pasada salte la pagina 404

    from django.shortcuts import get_object_or_404, render

    from .models import Question
    # ...
    def detail(request, question_id):
        question = get_object_or_404(Question, pk=question_id)
        return render(request, 'polls/detail.html', {'question': question})

** POLLS/TEMPLATES/POLLS/DETAIL.HTML **

    -añadimos el template de detail a la carpeta de templates. question.question_text es el titulo de la pregunta pasada por id y el for pinta cada uno de los choice.choice_text que tiene dicha pregunta

    <h1>{{ question.question_text }}</h1>
    <ul>
    {% for choice in question.choice_set.all %}
        <li>{{ choice.choice_text }}</li>
    {% endfor %}
    </ul>

** POLLS/TEMPLATS/POLLS/INDEX.HTML **
 
    -cambiamos la url para que no este hardcodeada el 'detail' despues de url esta declarado en la url de esa view con el atributo name

    {% if latest_question_list %}
        <ul>
        {% for question in latest_question_list %}
            <li><a href="{% url 'detail' question.id %}/">{{ question.question_text }}</a></li>
        {% endfor %}
        </ul>
        {% else %}
            <p>No polls are available.</p>
    {% endif %}

** POLLS/URLS.PY **

    -colocamos el nombre de la app para aplicar el namespace

    from django.urls import path

    from . import views

    app_name = 'polls'
    urlpatterns = [
        path('', views.index, name='index'),
        path('<int:question_id>/', views.detail, name='detail'),
        path('<int:question_id>/results/', views.results, name='results'),
        path('<int:question_id>/vote/', views.vote, name='vote'),
    ]

** POLLS/TEMPLATES/POLLS/INDEX.HTML **

    -cambiamos las

    {% if latest_question_list %}
        <ul>
        {% for question in latest_question_list %}
            <li><a href="{% url 'polls:detail' question.id %}/">{{ question.question_text }}</a></li>
        {% endfor %}
        </ul>
        {% else %}
            <p>No polls are available.</p>
    {% endif %}

** POLLS/TEMPLATES/POLLS/DETAIL.PY **

    -añadimos un formulario para poder votar en details

    <form action="{% url 'polls:vote' question.id %}" method="post">
    {% csrf_token %}
    <fieldset>
        <legend><h1>{{ question.question_text }}</h1></legend>
        {% if error_message %}
            <p><strong>{{ error_message }}</strong></p>
        {% endif %}
        {% for choice in question.choice_set.all %}
            <input type="radio" name="choice" id="choice{{ forloop.counter }}" value="{{ choice.id }}">
            <label for="choice{{ forloop.counter }}">{{ choice.choice_text }}</label><br>
        {% endfor %}
    </fieldset>
    <input type="submit" value="Vote">
    </form>

** POLLS/URLS.PY **

    -añadimos la url para recibir el resultado de los votos

    from django.urls import path

    from . import views

    app_name = 'polls'
    urlpatterns = [
        path('', views.index, name='index'),
        path('<int:question_id>/', views.detail, name='detail'),
        path('<int:question_id>/results/', views.results, name='results'),
      ->path('<int:question_id>/vote/', views.vote, name='vote'),
    ]

** POLLS/VIEWS.PY **

    -añadimos funcionalidad a nuestro formulario para votar

    from django.http import HttpResponse, HttpResponseRedirect
    from django.shortcuts import get_object_or_404, render
    from django.urls import reverse

    from .models import Choice, Question
    # ...
    def vote(request, question_id):
        question = get_object_or_404(Question, pk=question_id)
        try:
            selected_choice = question.choice_set.get(pk=request.POST['choice'])
        except (KeyError, Choice.DoesNotExist):
            # Redisplay the question voting form.
            return render(request, 'polls/detail.html', {
                'question': question,
                'error_message': "You didn't select a choice.",
            })
        else:
            selected_choice.votes += 1
            selected_choice.save()
            # Always return an HttpResponseRedirect after successfully dealing
            # with POST data. This prevents data from being posted twice if a
            # user hits the Back button.
            return HttpResponseRedirect(reverse('polls:results', args=(question.id,)))

